-- PMDO Mission Generation Library, by MistressNebula
-- Settings file
-- ----------------------------------------------------------------------------------------- --
-- This is the main library file containing all functions and callbacks.
-- If you need to configure your data, please refer to missiongen_settings.lua
-- ----------------------------------------------------------------------------------------- --
-- You will need to load this file using the require() function, preferably in a global
-- variable. You should never load this file more than once.
-- ----------------------------------------------------------------------------------------- --
-- This file also comes with a pre-installed menu for mission display.

local library = {
	--- Settings data imported from missiongen_settings.lua
    data = require("missiongen_settings"),
	--- shortcut to the root of the saved mission data, made accessible for quick reference.
	--- NEVER. EVER. CHANGE THIS VALUE.
	root = SV, --TODO add redundant safety reference?
}

--- root for global data and enum values.
local globals = {} --TODO define at the bottom probably
--- gender enum
globals.gender = {}
globals.gender["Unknown"] = -1
globals.gender["Genderless"] = 0
globals.gender["Male"] = 1
globals.gender["Female"] = 2

-- ----------------------------------------------------------------------------------------- --
-- region DATA GENERATORS
-- ----------------------------------------------------------------------------------------- --
-- Here at the top for easy access and reference, so that it is possible for modders to
-- quickly understand how the data is structured.

--- Loads the root of the main data structure, generating the specified nodes if necessary
function library:load()
    local rootpath = self.data.sv_root_name
    if type(root) ~= "table" then
        rootpath = {self.data.sv_root_name}
    end
    for _, id in ipairs(rootpath) do
        SV[id] = SV[id] or {}
        self.root = SV[id]
    end
	self:loadDifficulties()
	self:generateBoards()
end

function library:loadDifficulties()
	--- The list of all difficulty ranks, in order
	self.data.num_to_difficulty = self.data.difficulty_list
	--- Backwards reference from difficulty rank to number
	self.data.difficulty_to_num = {}
	for i, diff in ipairs(self.data.num_to_difficulty) do
		self.data.difficulty_to_num[diff] = i
	end
end

function library:generateBoards()
	self.root.taken = self.root.taken or {}
	self.root.boards = self.root.boards or {}
	for board_id in pairs(self.data.boards) do
		self.root.boards[board_id] = self.root.boards[board_id] or {}
	end
end

--- Returns a new empty job template
local jobTemplate = function()
    return {
		Client = nil,		-- MonsterID style table describing the client
		Target = nil,		-- MonsterID style table describing the target. Ignored if there is no target
		Flavor = {"", ""},	-- pair of string keys displayed when the job details are displayed
		Title = "",			-- string key displayed when viewing quest boards
		Zone = "",			-- The zone this job takes place in
		Segment = -1,		-- The specific segment this job takes place in
		Floor = -1,			-- The destination floor of this job
		Reward = "",		-- The displayed reward for this job. If set to an empty string, it becomes an autogenerated money amount
		Type = -1,			-- the type of mission
		Completion = -1,	-- the state of the mission
		Taken = 0,			-- taken list: if true, the quest is active. Boards: if true, the quest is inside the taken list
		Difficulty = "",	-- difficulty level of this
		Item = "",			-- id of the item this quest requires. Ignored if no item is referenced
		Special = "",		-- special quests can be triggered sometimes. If so, this will contain the special quest id
		BonusReward = ""	-- extra, hidden reward. can be nil. It will only appear as "???" when viewing quest details.
	}
end

-- Returns an empty MonsterID style table
local monsterIdTemplate = function()
	return {
		Species = "",
		Form = -1,
		Skin = "",
		Gender = globals.gender.Unknown
	}
end


-- ----------------------------------------------------------------------------------------- --
-- region DATA CONVERTERS
-- ----------------------------------------------------------------------------------------- --
-- Functions that convert data between C# and lua representation

local numberToGender = function(number)
	local res = Gender.Unknown
	if number == globals.gender.Genderless then
		res = Gender.Genderless
	elseif num == globals.gender.Male then
		res = Gender.Male
	elseif num == globals.gender.Female then
		res = Gender.Female
	end
	return res
end

local genderToNumber = function(gender)
	local res = globals.gender.Unknown
	if gender == Gender.Genderless then
		res = globals.gender.Genderless
	elseif gender == Gender.Male then
		res = globals.gender.Male
	elseif gender == Gender.Female then
		res = globals.gender.Female
	end
	return res
end

local tableToMonsterID = function(table)
	return RogueEssence.Dungeon.MonsterID(table.Species, table.Form, table.Skin, numberToGender(table.Gender))
end

local monsterIDToTable = function(monsterId)
	local table = monsterIdTemplate()
	table.Species = monsterId.Species
	table.Form = monsterId.Form
	table.Skin = monsterId.Skin
	table.Gender = monsterId.Gender
	return table
end

library:load()
return library